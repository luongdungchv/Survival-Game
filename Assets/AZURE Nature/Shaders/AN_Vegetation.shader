// Upgrade NOTE: replaced 'defined FOG_COMBINED_WITH_WORLD_POS' with 'defined (FOG_COMBINED_WITH_WORLD_POS)'

// Made with Amplify Shader Editor
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "Raygeas/AZURE Vegetation"
{
	Properties
	{
		[SingleLineTexture][Header(Maps)][Space(7)]_Texture00("Texture", 2D) = "white" {}
		[SingleLineTexture]_SmoothnessTexture3("Smoothness", 2D) = "white" {}
		[SingleLineTexture]_SnowMask("Snow Mask", 2D) = "white" {}
		_Tiling("Tiling", Float) = 1
		_SnowTiling("Snow Tiling", Float) = 1
		[Header(Settings)][Space(5)]_Color1("Main Color", Color) = (1,1,1,0)
		_AlphaCutoff("Alpha Cutoff", Range( 0 , 1)) = 0.35
		_Smoothness("Smoothness", Range( 0 , 1)) = 0
		[Header(Second Color Settings)][Space(5)][Toggle(_COLOR2ENABLE_ON)] _Color2Enable("Enable", Float) = 0
		_Color2("Second Color", Color) = (0,0,0,0)
		[KeywordEnum(Vertex_Position_Based,UV_Based)] _Color2OverlayType("Overlay Method", Float) = 0
		_Color2Level("Level", Float) = 0
		_Color2Fade("Fade", Range( -1 , 1)) = 0.5
		[Header(Show Settings)][Space(5)][Toggle(_SNOW_ON)] _SNOW("Enable", Float) = 0
		[KeywordEnum(World_Normal_Based,UV_Based)] _SnowOverlayType("Overlay Method", Float) = 0
		_SnowAmount("Amount", Range( 0 , 1)) = 0.5
		_SnowFade("Fade", Range( 0 , 1)) = 0.3
		[Header(Wind Settings)][Space(5)][Toggle(_WIND_ON)] _WIND("Enable", Float) = 1
		_WindForce("Force", Range( 0 , 1)) = 0.3
		_WindWavesScale("Waves Scale", Range( 0 , 1)) = 0.25
		_WindSpeed("Speed", Range( 0 , 1)) = 0.5
		[Toggle(_FIXTHEBASEOFFOLIAGE_ON)] _Fixthebaseoffoliage("Anchor the foliage base", Float) = 0
		[Header(Lighting Settings)][Space(5)]_DirectLightOffset("Direct Light Offset", Range( 0 , 1)) = 0
		_DirectLightInt("Direct Light Int", Range( 1 , 10)) = 1
		_IndirectLightInt("Indirect Light Int", Range( 1 , 10)) = 1
		_TranslucencyInt("Translucency Int", Range( 0 , 100)) = 0
		[HideInInspector] _texcoord( "", 2D ) = "white" {}
		[HideInInspector] __dirty( "", Int ) = 1
	}

	SubShader
	{
		Tags{ "RenderType" = "Grass"  "Queue" = "Geometry+0" }
		Cull Off
		#LINE 325

		
		// ------------------------------------------------------------
		// Surface shader code generated out of a CGPROGRAM block:
		

		// ---- forward rendering base pass:
		Pass {
			Name "FORWARD"
			Tags { "LightMode" = "UniversalForward" }

			CGPROGRAM
			// compile directives
			#pragma vertex vert_surf
			#pragma fragment frag_surf
			#pragma target 3.0
			#pragma shader_feature_local _WIND_ON
			#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
			#pragma shader_feature_local _SNOW_ON
			#pragma shader_feature_local _COLOR2ENABLE_ON
			#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
			#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
			#pragma multi_compile_instancing
			#pragma multi_compile_fog
			#pragma multi_compile_fwdbase noshadowmask nodynlightmap nodirlightmap nolightmap
			#include "HLSLSupport.cginc"
			#define UNITY_INSTANCED_LOD_FADE
			#define UNITY_INSTANCED_SH
			#define UNITY_INSTANCED_LIGHTMAPSTS
			#define UNITY_INSTANCED_RENDERER_BOUNDS
			#include "UnityShaderVariables.cginc"
			#include "UnityShaderUtilities.cginc"
			// -------- variant for: _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				// CBUFFER_START(UnityPerMaterial)
					
				// CBUFFER_END
				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(INSTANCING_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_WIND_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_FIXTHEBASEOFFOLIAGE_ON) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_SNOW_ON)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2ENABLE_ON) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_UV_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_UV_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif

			// -------- variant for: INSTANCING_ON _WIND_ON _FIXTHEBASEOFFOLIAGE_ON _SNOW_ON _COLOR2ENABLE_ON _COLOR2OVERLAYTYPE_UV_BASED _SNOWOVERLAYTYPE_UV_BASED 
			#if defined(INSTANCING_ON) && defined(_WIND_ON) && defined(_FIXTHEBASEOFFOLIAGE_ON) && defined(_SNOW_ON) && defined(_COLOR2ENABLE_ON) && defined(_COLOR2OVERLAYTYPE_UV_BASED) && defined(_SNOWOVERLAYTYPE_UV_BASED) && !defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED) && !defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
				// Surface shader code generated based on:
				// vertex modifier: 'vertexDataFunc'
				// writes to per-pixel normal: YES
				// writes to emission: no
				// writes to occlusion: no
				// needs world space reflection vector: no
				// needs world space normal vector: YES
				// needs screen space position: no
				// needs world space position: YES
				// needs view direction: no
				// needs world space view direction: no
				// needs world space position for lighting: YES
				// needs world space view direction for lighting: YES
				// needs world space view direction for lightmaps: no
				// needs vertex color: no
				// needs VFACE: no
				// needs SV_IsFrontFace: no
				// passes tangent-to-world matrix to pixel shader: YES
				// reads from normal: no
				// 1 texcoords actually used
				//   float2 _texcoord
				#include "UnityCG.cginc"
				//Shader does not support lightmap thus we always want to fallback to SH.
				#undef UNITY_SHOULD_SAMPLE_SH
				#define UNITY_SHOULD_SAMPLE_SH (!defined(UNITY_PASS_FORWARDADD) && !defined(UNITY_PASS_SHADOWCASTER) && !defined(UNITY_PASS_META))
				#include "AutoLight.cginc"

				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) fixed3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))

				// Original surface shader snippet:
				#line 42

				#include "UnityPBSLighting.cginc"
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				//#pragma target 3.0
				//#pragma shader_feature_local _WIND_ON
				//#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
				//#pragma shader_feature_local _SNOW_ON
				//#pragma shader_feature_local _COLOR2ENABLE_ON
				//#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
				//#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
				#ifdef UNITY_PASS_SHADOWCASTER
					#undef INTERNAL_DATA
					#undef WorldReflectionVector
					#undef WorldNormalVector
					#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
					#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
					#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
				#endif
				struct Input
				{
					float3 worldPos;
					float2 uv_texcoord;
					float4 screenPosition;
					float3 worldNormal;
					INTERNAL_DATA
				};

				struct SurfaceOutputCustomLightingCustom
				{
					half3 Albedo;
					half3 Normal;
					half3 Emission;
					half Metallic;
					half Smoothness;
					half Occlusion;
					half Alpha;
					Input SurfInput;
					UnityGIInput GIData;
				};

				CBUFFER_START(UnityPerMaterial)
					uniform float _WindSpeed;
					uniform float _WindWavesScale;
					uniform float _WindForce;
					uniform sampler2D _Texture00;
					uniform float _Tiling;
					uniform float _DirectLightOffset;
					uniform float4 _Color1;
					uniform float4 _Color2;
					uniform float _Color2Level;
					uniform float _Color2Fade;
					uniform float4 _Texture00_ST;
					uniform float _SnowAmount;
					uniform sampler2D _SnowMask;
					uniform float _SnowTiling;
					uniform float _SnowFade;
					uniform float _DirectLightInt;
					uniform float _IndirectLightInt;
					uniform sampler2D _SmoothnessTexture3;
					uniform float _Smoothness;
					uniform float _TranslucencyInt;
					uniform float _AlphaCutoff;
				CBUFFER_END


				float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

				float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

				float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

				float snoise( float3 v )
				{
					const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
					float3 i = floor( v + dot( v, C.yyy ) );
					float3 x0 = v - i + dot( i, C.xxx );
					float3 g = step( x0.yzx, x0.xyz );
					float3 l = 1.0 - g;
					float3 i1 = min( g.xyz, l.zxy );
					float3 i2 = max( g.xyz, l.zxy );
					float3 x1 = x0 - i1 + C.xxx;
					float3 x2 = x0 - i2 + C.yyy;
					float3 x3 = x0 - 0.5;
					i = mod3D289( i);
					float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
					float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
					float4 x_ = floor( j / 7.0 );
					float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
					float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
					float4 h = 1.0 - abs( x ) - abs( y );
					float4 b0 = float4( x.xy, y.xy );
					float4 b1 = float4( x.zw, y.zw );
					float4 s0 = floor( b0 ) * 2.0 + 1.0;
					float4 s1 = floor( b1 ) * 2.0 + 1.0;
					float4 sh = -step( h, 0.0 );
					float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
					float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
					float3 g0 = float3( a0.xy, h.x );
					float3 g1 = float3( a0.zw, h.y );
					float3 g2 = float3( a1.xy, h.z );
					float3 g3 = float3( a1.zw, h.w );
					float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
					g0 *= norm.x;
					g1 *= norm.y;
					g2 *= norm.z;
					g3 *= norm.w;
					float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
					m = m* m;
					m = m* m;
					float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
					return 42.0 * dot( m, px);
				}


				inline float Dither4x4Bayer( int x, int y )
				{
					const float dither[ 16 ] = {
						1,  9,  3, 11,
						13,  5, 15,  7,
						4, 12,  2, 10,
					16,  8, 14,  6 };
					int r = y * 4 + x;
					return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
				}


				void vertexDataFunc( inout appdata_full v, out Input o )
				{
					UNITY_INITIALIZE_OUTPUT( Input, o );
					// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
					// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
					// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
					// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
					// #ifdef _FIXTHEBASEOFFOLIAGE_ON
					// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
					// #else
					// 	float staticSwitch376 = temp_output_231_0;
					// #endif
					// #ifdef _WIND_ON
					// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
					// #else
					// 	float staticSwitch341 = 0.0;
					// #endif
					// float Wind191 = staticSwitch341;
					// float3 temp_cast_0 = (Wind191).xxx;
					//v.vertex.xyz += temp_cast_0;
					float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
					o.screenPosition = ase_screenPos;
				}

				inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
				{
					UnityGIInput data = s.GIData;
					Input i = s.SurfInput;
					half4 c = 0;
					#ifdef UNITY_PASS_FORWARDBASE
						float ase_lightAtten = data.atten;
						if( _LightColor0.a == 0)
						ase_lightAtten = 0;
					#else
						float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
						float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
					#endif
					#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
						half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
						float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
						float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
						ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
					#endif
					float2 temp_cast_0 = (_Tiling).xx;
					float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
					float2 Tiling446 = uv_TexCoord445;
					float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
					float OpacityMask263 = tex2DNode1.a;
					float4 ase_screenPos = i.screenPosition;
					float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
					ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
					float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
					float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
					dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
					float3 ase_worldPos = i.worldPos;
					#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
						float3 ase_worldlightDir = 0;
					#else //aseld
						float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
					#endif //aseld
					float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
					float3 ase_normWorldNormal = normalize( ase_worldNormal );
					float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
					#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
						float4 ase_lightColor = 0;
					#else //aselc
						float4 ase_lightColor = _LightColor0;
					#endif //aselc
					float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
					float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
					#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
						float staticSwitch360 = ase_vertex3Pos.y;
					#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
						float staticSwitch360 = i.uv_texcoord.y;
					#else
						float staticSwitch360 = ase_vertex3Pos.y;
					#endif
					float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
					float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
					#ifdef _COLOR2ENABLE_ON
						float4 staticSwitch340 = lerpResult332;
					#else
						float4 staticSwitch340 = temp_output_10_0;
					#endif
					float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
					float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
					#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
						float staticSwitch390 = ase_worldNormal.y;
					#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
						float staticSwitch390 = i.uv_texcoord.y;
					#else
						float staticSwitch390 = ase_worldNormal.y;
					#endif
					float2 temp_cast_1 = (_SnowTiling).xx;
					float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
					float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
					float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
					float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
					#ifdef _SNOW_ON
						float4 staticSwitch342 = lerpResult295;
					#else
						float4 staticSwitch342 = staticSwitch340;
					#endif
					float4 Albedo259 = staticSwitch342;
					float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
					UnityGI gi462 = gi;
					float3 diffNorm462 = ase_worldNormal;
					gi462 = UnityGI_Base( data, 1, diffNorm462 );
					float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
					float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
					SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
					s443.Albedo = float3( 0,0,0 );
					s443.Normal = ase_worldNormal;
					s443.Emission = float3( 0,0,0 );
					s443.Metallic = 0.0;
					s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
					s443.Occlusion = 1.0;

					data.light = gi.light;

					UnityGI gi443 = gi;
					#ifdef UNITY_PASS_FORWARDBASE
						Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
						gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
					#endif

					float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
					surfResult443 += s443.Emission;

					#ifdef UNITY_PASS_FORWARDADD//443
						surfResult443 -= s443.Emission;
					#endif//443
					float3 Smoothness441 = saturate( surfResult443 );
					float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
					float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
					float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
					float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
					float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
					c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
					c.a = 1;
					clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
					return c;
				}

				inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
				{
					s.GIData = data;
				}

				void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
				{
					o.SurfInput = i;
					o.Normal = float3(0,0,1);
				}

				#line 324 ""
				#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
				#endif
				/* UNITY: Original start of shader */
				//#pragma surface surf StandardCustomLighting keepalpha fullforwardshadows nolightmap  nodynlightmap nodirlightmap nometa noforwardadd vertex:vertexDataFunc 

				

				// vertex-to-fragment interpolation data
				// no lightmaps:
				#ifndef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							#if UNITY_SHOULD_SAMPLE_SH
								half3 sh : TEXCOORD5; // SH
							#endif
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				// with lightmaps:
				#ifdef LIGHTMAP_ON
					// half-precision fragment shader registers:
					#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						#define FOG_COMBINED_WITH_TSPACE
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_LIGHTING_COORDS(6,7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
					// high-precision fragment shader registers:
					#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS
						struct v2f_surf {
							UNITY_POSITION(pos);
							float2 pack0 : TEXCOORD0; // _texcoord
							float4 tSpace0 : TEXCOORD1;
							float4 tSpace1 : TEXCOORD2;
							float4 tSpace2 : TEXCOORD3;
							float4 custompack0 : TEXCOORD4; // screenPosition
							float4 lmap : TEXCOORD5;
							UNITY_FOG_COORDS(6)
							UNITY_SHADOW_COORDS(7)
							UNITY_VERTEX_INPUT_INSTANCE_ID
							UNITY_VERTEX_OUTPUT_STEREO
						};
					#endif
				#endif
				float4 _texcoord_ST;

				// vertex shader
				v2f_surf vert_surf (appdata_full v) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f_surf o;
					UNITY_INITIALIZE_OUTPUT(v2f_surf,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);
					Input customInputData;
					vertexDataFunc (v, customInputData);
					o.custompack0.xyzw = customInputData.screenPosition;
					o.pos = UnityObjectToClipPos(v.vertex);
					o.pack0.xy = TRANSFORM_TEX(v.texcoord, _texcoord);
					float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
					float3 worldNormal = UnityObjectToWorldNormal(v.normal);
					fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
					fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
					o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
					o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
					o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);
					#ifdef LIGHTMAP_ON
						o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#endif

					// SH/ambient and vertex lights
					#ifndef LIGHTMAP_ON
						#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
							o.sh = 0;
							// Approximated illumination from non-important point lights
							#ifdef VERTEXLIGHT_ON
								o.sh += Shade4PointLights (
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal);
							#endif
							o.sh = ShadeSHPerVertex (worldNormal, o.sh);
						#endif
					#endif // !LIGHTMAP_ON

					UNITY_TRANSFER_LIGHTING(o,v.texcoord1.xy); // pass shadow and, possibly, light cookie coordinates to pixel shader
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_TRANSFER_FOG_COMBINED_WITH_TSPACE(o,o.pos); // pass fog coordinates to pixel shader
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_TRANSFER_FOG_COMBINED_WITH_WORLD_POS(o,o.pos); // pass fog coordinates to pixel shader
					#else
						UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel shader
					#endif
					return o;
				}

				// fragment shader
				fixed4 frag_surf (v2f_surf IN) : SV_Target {
					UNITY_SETUP_INSTANCE_ID(IN);
					UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);
					// prepare and unpack data
					Input surfIN;
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_EXTRACT_FOG_FROM_TSPACE(IN);
					#elif defined (FOG_COMBINED_WITH_WORLD_POS)
						UNITY_EXTRACT_FOG_FROM_WORLD_POS(IN);
					#else
						UNITY_EXTRACT_FOG(IN);
					#endif
					#ifdef FOG_COMBINED_WITH_TSPACE
						UNITY_RECONSTRUCT_TBN(IN);
					#else
						UNITY_EXTRACT_TBN(IN);
					#endif
					UNITY_INITIALIZE_OUTPUT(Input,surfIN);
					surfIN.worldPos.x = 1.0;
					surfIN.uv_texcoord.x = 1.0;
					surfIN.screenPosition.x = 1.0;
					surfIN.worldNormal.x = 1.0;
					surfIN.uv_texcoord = IN.pack0.xy;
					surfIN.screenPosition = IN.custompack0.xyzw;
					float3 worldPos = float3(IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w);
					#ifndef USING_DIRECTIONAL_LIGHT
						fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						fixed3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
					surfIN.worldNormal = 0.0;
					surfIN.internalSurfaceTtoW0 = _unity_tbn_0;
					surfIN.internalSurfaceTtoW1 = _unity_tbn_1;
					surfIN.internalSurfaceTtoW2 = _unity_tbn_2;
					surfIN.worldPos = worldPos;
					#ifdef UNITY_COMPILER_HLSL
						SurfaceOutputCustomLightingCustom o = (SurfaceOutputCustomLightingCustom)0;
					#else
						SurfaceOutputCustomLightingCustom o;
					#endif
					o.Albedo = 0.0;
					o.Emission = 0.0;
					o.Alpha = 0.0;
					o.Occlusion = 1.0;
					fixed3 normalWorldVertex = fixed3(0,0,1);
					o.Normal = fixed3(0,0,1);

					// call surface function
					surf (surfIN, o);

					// compute lighting & shadowing factor
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
					fixed4 c = 0;
					float3 worldN;
					worldN.x = dot(_unity_tbn_0, o.Normal);
					worldN.y = dot(_unity_tbn_1, o.Normal);
					worldN.z = dot(_unity_tbn_2, o.Normal);
					worldN = normalize(worldN);
					o.Normal = worldN;

					// Setup lighting environment
					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					// Call GI (lightmaps/SH/reflections) lighting function
					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.lmap;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.sh;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for blending
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif
					LightingStandardCustomLighting_GI(o, giInput, gi);

					// realtime lighting: call lighting function
					c += LightingStandardCustomLighting (o, worldViewDir, gi);
					UNITY_APPLY_FOG(_unity_fogCoord, c); // apply fog
					return c;
				}


			#endif


			ENDCG

		}

		// ---- end of surface shader generated code

		#LINE 329

		Pass
		{
			Name "ShadowCaster"
			Tags{ "LightMode" = "ShadowCaster" }
			ZWrite On
			CGPROGRAM
			#include "HLSLSupport.cginc"
			#define UNITY_INSTANCED_LOD_FADE
			#define UNITY_INSTANCED_SH
			#define UNITY_INSTANCED_LIGHTMAPSTS
			#define UNITY_INSTANCED_RENDERER_BOUNDS
			#include "UnityShaderVariables.cginc"
			#include "UnityShaderUtilities.cginc"
			#line 42

			#include "UnityPBSLighting.cginc"
			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#pragma target 3.0
			#pragma shader_feature_local _WIND_ON
			#pragma shader_feature_local _FIXTHEBASEOFFOLIAGE_ON
			#pragma shader_feature_local _SNOW_ON
			#pragma shader_feature_local _COLOR2ENABLE_ON
			#pragma shader_feature_local _COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED _COLOR2OVERLAYTYPE_UV_BASED
			#pragma shader_feature_local _SNOWOVERLAYTYPE_WORLD_NORMAL_BASED _SNOWOVERLAYTYPE_UV_BASED
			#ifdef UNITY_PASS_SHADOWCASTER
				#undef INTERNAL_DATA
				#undef WorldReflectionVector
				#undef WorldNormalVector
				#define INTERNAL_DATA half3 internalSurfaceTtoW0; half3 internalSurfaceTtoW1; half3 internalSurfaceTtoW2;
				#define WorldReflectionVector(data,normal) reflect (data.worldRefl, half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal)))
				#define WorldNormalVector(data,normal) half3(dot(data.internalSurfaceTtoW0,normal), dot(data.internalSurfaceTtoW1,normal), dot(data.internalSurfaceTtoW2,normal))
			#endif
			struct Input
			{
				float3 worldPos;
				float2 uv_texcoord;
				float4 screenPosition;
				float3 worldNormal;
				INTERNAL_DATA
			};

			struct SurfaceOutputCustomLightingCustom
			{
				half3 Albedo;
				half3 Normal;
				half3 Emission;
				half Metallic;
				half Smoothness;
				half Occlusion;
				half Alpha;
				Input SurfInput;
				UnityGIInput GIData;
			};
			CBUFFER_START(UnityPerMaterial)
				uniform float _WindSpeed;
				uniform float _WindWavesScale;
				uniform float _WindForce;
				uniform sampler2D _Texture00;
				uniform float _Tiling;
				uniform float _DirectLightOffset;
				uniform float4 _Color1;
				uniform float4 _Color2;
				uniform float _Color2Level;
				uniform float _Color2Fade;
				uniform float4 _Texture00_ST;
				uniform float _SnowAmount;
				uniform sampler2D _SnowMask;
				uniform float _SnowTiling;
				uniform float _SnowFade;
				uniform float _DirectLightInt;
				uniform float _IndirectLightInt;
				uniform sampler2D _SmoothnessTexture3;
				uniform float _Smoothness;
				uniform float _TranslucencyInt;
				uniform float _AlphaCutoff;
			CBUFFER_END


			float3 mod3D289( float3 x ) { return x - floor( x / 289.0 ) * 289.0; }

			float4 mod3D289( float4 x ) { return x - floor( x / 289.0 ) * 289.0; }

			float4 permute( float4 x ) { return mod3D289( ( x * 34.0 + 1.0 ) * x ); }

			float4 taylorInvSqrt( float4 r ) { return 1.79284291400159 - r * 0.85373472095314; }

			float snoise( float3 v )
			{
				const float2 C = float2( 1.0 / 6.0, 1.0 / 3.0 );
				float3 i = floor( v + dot( v, C.yyy ) );
				float3 x0 = v - i + dot( i, C.xxx );
				float3 g = step( x0.yzx, x0.xyz );
				float3 l = 1.0 - g;
				float3 i1 = min( g.xyz, l.zxy );
				float3 i2 = max( g.xyz, l.zxy );
				float3 x1 = x0 - i1 + C.xxx;
				float3 x2 = x0 - i2 + C.yyy;
				float3 x3 = x0 - 0.5;
				i = mod3D289( i);
				float4 p = permute( permute( permute( i.z + float4( 0.0, i1.z, i2.z, 1.0 ) ) + i.y + float4( 0.0, i1.y, i2.y, 1.0 ) ) + i.x + float4( 0.0, i1.x, i2.x, 1.0 ) );
				float4 j = p - 49.0 * floor( p / 49.0 );  // mod(p,7*7)
				float4 x_ = floor( j / 7.0 );
				float4 y_ = floor( j - 7.0 * x_ );  // mod(j,N)
				float4 x = ( x_ * 2.0 + 0.5 ) / 7.0 - 1.0;
				float4 y = ( y_ * 2.0 + 0.5 ) / 7.0 - 1.0;
				float4 h = 1.0 - abs( x ) - abs( y );
				float4 b0 = float4( x.xy, y.xy );
				float4 b1 = float4( x.zw, y.zw );
				float4 s0 = floor( b0 ) * 2.0 + 1.0;
				float4 s1 = floor( b1 ) * 2.0 + 1.0;
				float4 sh = -step( h, 0.0 );
				float4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;
				float4 a1 = b1.xzyw + s1.xzyw * sh.zzww;
				float3 g0 = float3( a0.xy, h.x );
				float3 g1 = float3( a0.zw, h.y );
				float3 g2 = float3( a1.xy, h.z );
				float3 g3 = float3( a1.zw, h.w );
				float4 norm = taylorInvSqrt( float4( dot( g0, g0 ), dot( g1, g1 ), dot( g2, g2 ), dot( g3, g3 ) ) );
				g0 *= norm.x;
				g1 *= norm.y;
				g2 *= norm.z;
				g3 *= norm.w;
				float4 m = max( 0.6 - float4( dot( x0, x0 ), dot( x1, x1 ), dot( x2, x2 ), dot( x3, x3 ) ), 0.0 );
				m = m* m;
				m = m* m;
				float4 px = float4( dot( x0, g0 ), dot( x1, g1 ), dot( x2, g2 ), dot( x3, g3 ) );
				return 42.0 * dot( m, px);
			}


			inline float Dither4x4Bayer( int x, int y )
			{
				const float dither[ 16 ] = {
					1,  9,  3, 11,
					13,  5, 15,  7,
					4, 12,  2, 10,
				16,  8, 14,  6 };
				int r = y * 4 + x;
				return dither[r] / 16; // same # of instructions as pre-dividing due to compiler magic
			}


			void vertexDataFunc( inout appdata_full v, out Input o )
			{
				UNITY_INITIALIZE_OUTPUT( Input, o );
				// float3 ase_worldPos = mul( unity_ObjectToWorld, v.vertex );
				// float mulTime34 = _Time.y * ( _WindSpeed * 5 );
				// float simplePerlin3D35 = snoise( ( ase_worldPos + mulTime34 )*_WindWavesScale );
				// float temp_output_231_0 = ( simplePerlin3D35 * 0.01 );
				// #ifdef _FIXTHEBASEOFFOLIAGE_ON
				// 	float staticSwitch376 = ( temp_output_231_0 * pow( v.texcoord.xy.y , 2.0 ) );
				// #else
				// 	float staticSwitch376 = temp_output_231_0;
				// #endif
				// #ifdef _WIND_ON
				// 	float staticSwitch341 = ( staticSwitch376 * ( _WindForce * 30 ) );
				// #else
				// 	float staticSwitch341 = 0.0;
				// #endif
				// float Wind191 = staticSwitch341;
				// float3 temp_cast_0 = (Wind191).xxx;
				//v.vertex.xyz += temp_cast_0;
				float4 ase_screenPos = ComputeScreenPos( UnityObjectToClipPos( v.vertex ) );
				o.screenPosition = ase_screenPos;
			}

			inline half4 LightingStandardCustomLighting( inout SurfaceOutputCustomLightingCustom s, half3 viewDir, UnityGI gi )
			{
				UnityGIInput data = s.GIData;
				Input i = s.SurfInput;
				half4 c = 0;
				#ifdef UNITY_PASS_FORWARDBASE
					float ase_lightAtten = data.atten;
					if( _LightColor0.a == 0)
					ase_lightAtten = 0;
				#else
					float3 ase_lightAttenRGB = gi.light.color / ( ( _LightColor0.rgb ) + 0.000001 );
					float ase_lightAtten = max( max( ase_lightAttenRGB.r, ase_lightAttenRGB.g ), ase_lightAttenRGB.b );
				#endif
				#if defined(HANDLE_SHADOWS_BLENDING_IN_GI)
					half bakedAtten = UnitySampleBakedOcclusion(data.lightmapUV.xy, data.worldPos);
					float zDist = dot(_WorldSpaceCameraPos - data.worldPos, UNITY_MATRIX_V[2].xyz);
					float fadeDist = UnityComputeShadowFadeDistance(data.worldPos, zDist);
					ase_lightAtten = UnityMixRealtimeAndBakedShadows(data.atten, bakedAtten, UnityComputeShadowFade(fadeDist));
				#endif
				float2 temp_cast_0 = (_Tiling).xx;
				float2 uv_TexCoord445 = i.uv_texcoord * temp_cast_0;
				float2 Tiling446 = uv_TexCoord445;
				float4 tex2DNode1 = tex2D( _Texture00, Tiling446 );
				float OpacityMask263 = tex2DNode1.a;
				float4 ase_screenPos = i.screenPosition;
				float4 ase_screenPosNorm = ase_screenPos / ase_screenPos.w;
				ase_screenPosNorm.z = ( UNITY_NEAR_CLIP_VALUE >= 0 ) ? ase_screenPosNorm.z : ase_screenPosNorm.z * 0.5 + 0.5;
				float2 clipScreen458 = ase_screenPosNorm.xy * _ScreenParams.xy;
				float dither458 = Dither4x4Bayer( fmod(clipScreen458.x, 4), fmod(clipScreen458.y, 4) );
				dither458 = step( dither458, ( unity_LODFade.x > 0.0 ? unity_LODFade.x : 1.0 ) );
				float3 ase_worldPos = i.worldPos;
				#if defined(LIGHTMAP_ON) && UNITY_VERSION < 560 //aseld
					float3 ase_worldlightDir = 0;
				#else //aseld
					float3 ase_worldlightDir = Unity_SafeNormalize( UnityWorldSpaceLightDir( ase_worldPos ) );
				#endif //aseld
				float3 ase_worldNormal = WorldNormalVector( i, float3( 0, 0, 1 ) );
				float3 ase_normWorldNormal = normalize( ase_worldNormal );
				float dotResult413 = dot( ase_worldlightDir , ase_normWorldNormal );
				#if defined(LIGHTMAP_ON) && ( UNITY_VERSION < 560 || ( defined(LIGHTMAP_SHADOW_MIXING) && !defined(SHADOWS_SHADOWMASK) && defined(SHADOWS_SCREEN) ) )//aselc
					float4 ase_lightColor = 0;
				#else //aselc
					float4 ase_lightColor = _LightColor0;
				#endif //aselc
				float4 temp_output_10_0 = ( _Color1 * tex2DNode1 );
				float3 ase_vertex3Pos = mul( unity_WorldToObject, float4( i.worldPos , 1 ) );
				#if defined(_COLOR2OVERLAYTYPE_VERTEX_POSITION_BASED)
					float staticSwitch360 = ase_vertex3Pos.y;
				#elif defined(_COLOR2OVERLAYTYPE_UV_BASED)
					float staticSwitch360 = i.uv_texcoord.y;
				#else
					float staticSwitch360 = ase_vertex3Pos.y;
				#endif
				float SecondColorMask335 = saturate( ( ( staticSwitch360 + _Color2Level ) * ( _Color2Fade * 2 ) ) );
				float4 lerpResult332 = lerp( temp_output_10_0 , ( _Color2 * tex2D( _Texture00, Tiling446 ) ) , SecondColorMask335);
				#ifdef _COLOR2ENABLE_ON
					float4 staticSwitch340 = lerpResult332;
				#else
					float4 staticSwitch340 = temp_output_10_0;
				#endif
				float4 color288 = IsGammaSpace() ? float4(0.8962264,0.8962264,0.8962264,0) : float4(0.7799658,0.7799658,0.7799658,0);
				float2 uv_Texture00 = i.uv_texcoord * _Texture00_ST.xy + _Texture00_ST.zw;
				#if defined(_SNOWOVERLAYTYPE_WORLD_NORMAL_BASED)
					float staticSwitch390 = ase_worldNormal.y;
				#elif defined(_SNOWOVERLAYTYPE_UV_BASED)
					float staticSwitch390 = i.uv_texcoord.y;
				#else
					float staticSwitch390 = ase_worldNormal.y;
				#endif
				float2 temp_cast_1 = (_SnowTiling).xx;
				float2 uv_TexCoord464 = i.uv_texcoord * temp_cast_1;
				float saferPower354 = max( ( ( staticSwitch390 * ( _SnowAmount * 5 ) ) - tex2D( _SnowMask, uv_TexCoord464 ).r ) , 0.0001 );
				float SnowMask314 = saturate( pow( saferPower354 , ( _SnowFade * 20 ) ) );
				float4 lerpResult295 = lerp( staticSwitch340 , ( color288 * tex2D( _Texture00, uv_Texture00 ) ) , SnowMask314);
				#ifdef _SNOW_ON
					float4 staticSwitch342 = lerpResult295;
				#else
					float4 staticSwitch342 = staticSwitch340;
				#endif
				float4 Albedo259 = staticSwitch342;
				float4 DirectLight440 = ( ( saturate( (dotResult413*1.0 + _DirectLightOffset) ) * ase_lightAtten ) * ase_lightColor * Albedo259 * _DirectLightInt );
				UnityGI gi462 = gi;
				float3 diffNorm462 = ase_worldNormal;
				gi462 = UnityGI_Base( data, 1, diffNorm462 );
				float3 indirectDiffuse462 = gi462.indirect.diffuse + diffNorm462 * 0.0001;
				float4 IndirectLight439 = ( float4( indirectDiffuse462 , 0.0 ) * Albedo259 * _IndirectLightInt );
				SurfaceOutputStandard s443 = (SurfaceOutputStandard ) 0;
				s443.Albedo = float3( 0,0,0 );
				s443.Normal = ase_worldNormal;
				s443.Emission = float3( 0,0,0 );
				s443.Metallic = 0.0;
				s443.Smoothness = ( tex2D( _SmoothnessTexture3, Tiling446 ) * _Smoothness ).r;
				s443.Occlusion = 1.0;

				data.light = gi.light;

				UnityGI gi443 = gi;
				#ifdef UNITY_PASS_FORWARDBASE
					Unity_GlossyEnvironmentData g443 = UnityGlossyEnvironmentSetup( s443.Smoothness, data.worldViewDir, s443.Normal, float3(0,0,0));
					gi443 = UnityGlobalIllumination( data, s443.Occlusion, s443.Normal, g443 );
				#endif

				float3 surfResult443 = LightingStandard ( s443, viewDir, gi443 ).rgb;
				surfResult443 += s443.Emission;

				#ifdef UNITY_PASS_FORWARDADD//443
					surfResult443 -= s443.Emission;
				#endif//443
				float3 Smoothness441 = saturate( surfResult443 );
				float3 ase_worldViewDir = Unity_SafeNormalize( UnityWorldSpaceViewDir( ase_worldPos ) );
				float dotResult401 = dot( ase_worldlightDir , ase_worldViewDir );
				float TranslucencyMask417 = (-dotResult401*1.0 + -0.2);
				float dotResult399 = dot( ase_worldlightDir , ase_normWorldNormal );
				float4 Translucency442 = saturate( ( ( TranslucencyMask417 * ( ( ( (dotResult399*1.0 + 1.0) * ase_lightAtten ) * (ase_lightColor * ase_lightColor) * Albedo259 ) * 0.25 ) ) * _TranslucencyInt ) );
				c.rgb = ( DirectLight440 + IndirectLight439 + float4( Smoothness441 , 0.0 ) + Translucency442 ).rgb;
				c.a = 1;
				clip( ( OpacityMask263 * dither458 ) - _AlphaCutoff );
				return c;
			}

			inline void LightingStandardCustomLighting_GI( inout SurfaceOutputCustomLightingCustom s, UnityGIInput data, inout UnityGI gi )
			{
				s.GIData = data;
			}

			void surf( Input i , inout SurfaceOutputCustomLightingCustom o )
			{
				o.SurfInput = i;
				o.Normal = float3(0,0,1);
			}

			#line 333 ""
			#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING
			#endif
			/* UNITY: Original start of shader */
			#pragma vertex vert
			#pragma fragment frag
			#pragma target 3.0
			#pragma multi_compile_shadowcaster
			#pragma multi_compile UNITY_PASS_SHADOWCASTER
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#include "HLSLSupport.cginc"
			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			struct v2f
			{
				V2F_SHADOW_CASTER;
				float2 customPack1 : TEXCOORD1;
				float4 customPack2 : TEXCOORD2;
				float4 tSpace0 : TEXCOORD3;
				float4 tSpace1 : TEXCOORD4;
				float4 tSpace2 : TEXCOORD5;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};
			v2f vert( appdata_full v )
			{
				v2f o;
				UNITY_SETUP_INSTANCE_ID( v );
				UNITY_INITIALIZE_OUTPUT( v2f, o );
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( o );
				UNITY_TRANSFER_INSTANCE_ID( v, o );
				Input customInputData;
				vertexDataFunc( v, customInputData );
				float3 worldPos = mul( unity_ObjectToWorld, v.vertex ).xyz;
				half3 worldNormal = UnityObjectToWorldNormal( v.normal );
				half3 worldTangent = UnityObjectToWorldDir( v.tangent.xyz );
				half tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				half3 worldBinormal = cross( worldNormal, worldTangent ) * tangentSign;
				o.tSpace0 = float4( worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x );
				o.tSpace1 = float4( worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y );
				o.tSpace2 = float4( worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z );
				o.customPack1.xy = customInputData.uv_texcoord;
				o.customPack1.xy = v.texcoord;
				o.customPack2.xyzw = customInputData.screenPosition;
				TRANSFER_SHADOW_CASTER_NORMALOFFSET( o )
				return o;
			}
			half4 frag( v2f IN
			#if !defined( CAN_SKIP_VPOS )
				, UNITY_VPOS_TYPE vpos : VPOS
			#endif
			) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( IN );
				Input surfIN;
				UNITY_INITIALIZE_OUTPUT( Input, surfIN );
				surfIN.uv_texcoord = IN.customPack1.xy;
				surfIN.screenPosition = IN.customPack2.xyzw;
				float3 worldPos = float3( IN.tSpace0.w, IN.tSpace1.w, IN.tSpace2.w );
				half3 worldViewDir = normalize( UnityWorldSpaceViewDir( worldPos ) );
				surfIN.worldPos = worldPos;
				surfIN.worldNormal = float3( IN.tSpace0.z, IN.tSpace1.z, IN.tSpace2.z );
				surfIN.internalSurfaceTtoW0 = IN.tSpace0.xyz;
				surfIN.internalSurfaceTtoW1 = IN.tSpace1.xyz;
				surfIN.internalSurfaceTtoW2 = IN.tSpace2.xyz;
				SurfaceOutputCustomLightingCustom o;
				UNITY_INITIALIZE_OUTPUT( SurfaceOutputCustomLightingCustom, o )
				surf( surfIN, o );
				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT( UnityGI, gi );
				o.Alpha = LightingStandardCustomLighting( o, worldViewDir, gi ).a;
				#if defined( CAN_SKIP_VPOS )
					float2 vpos = IN.pos;
				#endif
				SHADOW_CASTER_FRAGMENT( IN )
			}
			ENDCG

			#LINE 412

		}
	}
	Fallback "Diffuse"
}
