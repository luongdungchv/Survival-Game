#pragma kernel CSMain
struct InstanceData{
    float3 pos;
    float4x4 trs;
    float texIndex;  
    int chunkIndex;
};

RWStructuredBuffer<InstanceData> instanceBuffer;
AppendStructuredBuffer<InstanceData> renderBuffer;

float culledDist;
float3 camPos;
float4 occupiedChunkIndices;
float4x4 vp;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int chunkIndex = instanceBuffer[id.x].chunkIndex;
    bool isChunkOccupied = 
        chunkIndex == occupiedChunkIndices.x ||
        chunkIndex == occupiedChunkIndices.y ||
        chunkIndex == occupiedChunkIndices.z ||
        chunkIndex == occupiedChunkIndices.w;
    if(!isChunkOccupied) return;
    float4 pos = float4(instanceBuffer[id.x].pos, 1);
    
    float4 viewspace = mul(vp, pos);
    float4 clipspace = viewspace;
    
    float x = clipspace.x;
    float y = clipspace.y;
    float z = clipspace.z;
    float w = clipspace.w + 0.3;
    
    bool inView = !(x < -w || x > w|| y < -w || y > w || z < -w || z > w);
    float3 dir = camPos - pos.xyz;
    float dist = dir.x * dir.x + dir.z * dir.z;
    bool withinDist = dist < culledDist;
    
    if(inView && withinDist) renderBuffer.Append(instanceBuffer[id.x]);
    
}
